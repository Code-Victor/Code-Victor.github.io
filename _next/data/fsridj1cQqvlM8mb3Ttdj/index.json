{"pageProps":{"fallback":{"/api/article":{"status":"ok","feed":{"url":"https://www.medium.com/feed/@oluwaborihamzat","title":"Stories by Oluwabori hamzat on Medium","link":"https://medium.com/@oluwaborihamzat?source=rss-cbaafcecc5d------2","author":"","description":"Stories by Oluwabori hamzat on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*M1yKHsSJp2KSpna5.jpg"},"items":[{"title":"Layout Animations with Framer motion","pubDate":"2022-07-07 12:28:27","link":"https://medium.com/@oluwaborihamzat/layout-animations-with-framer-motion-25807bfc3750?source=rss-cbaafcecc5d------2","guid":"https://medium.com/p/25807bfc3750","author":"Oluwabori hamzat","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*OgfGgWfcV4JEKUvNxf2AuA.png","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OgfGgWfcV4JEKUvNxf2AuA.png\"><figcaption>Logo of framer motion</figcaption></figure><p>One of the significant differences between a boring user experience and a good one is animations. Not just fade-in animations but animations with context(such as micro animations in icons or buttons and Layout animations).</p>\n<p>Layout animation which is my focus is really of importance, because the attention of the user often follows animations. But the current state of the web doesn’t support layout effects. We’ve always seen layout animations on mobile apps, when we click on a card then it pops up giving more details, and the experience is quite enjoyable You’re always sure of what to do next. but on the web, you get something like this.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/854/1*GuhBgtp4Ppedai47b4xv9w.gif\"></figure><p>😤😤 annoying isn’t it. The user interface just threw the user into an ocean of doubts and questions— “what am I going to do next?”, “Is this the element I clicked on?”. These sorts of questions are what prompted me to write this.</p>\n<p>We would implement a solution to this problem with <a href=\"https://reactjs.org/\">react</a>, <a href=\"https://www.typescriptlang.org/\">typescript</a>(very minimal), <a href=\"https://stitches.dev/\">Stitches.js</a> (a CSS in JS library), and <a href=\"https://www.framer.com/motion/\">framer motion</a>, our animation library. First, we build our user interface, nothing complex just a centered grid with 2 columns and cards.</p>\n<h4>1. Building the user interface</h4>\n<p>We import the necessary libraries</p>\n<a href=\"https://medium.com/media/b3929118573e74269d6296196b92bb18/href\">https://medium.com/media/b3929118573e74269d6296196b92bb18/href</a><p>we then get the data for components you can get all the images from the <a href=\"https://github.com/Code-Victor/Layout-animation\">GitHub repository.</a></p>\n<a href=\"https://medium.com/media/36ca65ad8f6e50264b44c17efd47a3dc/href\">https://medium.com/media/36ca65ad8f6e50264b44c17efd47a3dc/href</a><p>then we create our base components, it doesn’t have to be in the same file.</p>\n<a href=\"https://medium.com/media/4efacedaa90a8a050034d22fa6c6699f/href\">https://medium.com/media/4efacedaa90a8a050034d22fa6c6699f/href</a><p>the syntax of stitches is just like most CSS-in-JS frameworks, with a twist — Stitches has a fully-typed API that gives it the best Developer Experience. Composing all of these little parts together, we build the user interface</p>\n<a href=\"https://medium.com/media/2d3b19397646bc7ac6320e59e3a94e71/href\">https://medium.com/media/2d3b19397646bc7ac6320e59e3a94e71/href</a><p>The code is simple. we created a state to store the id of the selected item(for those new to typescript the &lt;undefined | number&gt; is just to indicate that type of the constant selected can either be a number or undefined) and we built the user interface with the base components. This is the result</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/854/1*GuhBgtp4Ppedai47b4xv9w.gif\"><figcaption>of the layout</figcaption></figure><p>It’s functional but without animations. To add animation to it will have to make use of the motion component.</p>\n<h4>2. Adding animations</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*04haYozrLH6fRrBl7VTzcg.png\"><figcaption>updated components</figcaption></figure><p>now that we’ve updated our base components, we have to make use of the properties given to us by the motion component. The properties of concern are layoutId and layout . with layoutId property framer-motion can identify the element and if the position of the element changes in the DOM it animates the elements(so far the layoutId stays the same). This might be a lot to take in at first but in practice is far too easy. So we add the layoutId to the Card component.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZKmR6ei3hcacoBX38cENVQ.png\"><figcaption>added layout Id (line 17)</figcaption></figure><p>the results?</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/854/1*WLtlkvckMd7hY_4apRhr5w.gif\"><figcaption>Final result</figcaption></figure><p>better right? We can notice that the elements in the background were animated to fill up the space but the MainCard didn’t animate at all. that’s because the MainCard doesn’t have the layoutId of the selected card(i.e the card that was removed from the DOM). By adding this we get the animation we’ve been looking for.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vdy1H26IxczklahfMlwQXQ.png\"><figcaption>MainCard with layouId(Line 38)</figcaption></figure><p>the results?</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/854/1*UIQY4a_bitBDdxOzo3PebQ.gif\"><figcaption>Final result</figcaption></figure><p>we’ve finally seen what we want. You can see how easy it is to build layout animations with framer-motion. this is the code for the app</p>\n<a href=\"https://medium.com/media/2384baab1d401198db563d2884ff181a/href\">https://medium.com/media/2384baab1d401198db563d2884ff181a/href</a><h4>3. HindSight</h4>\n<p>we could have added a placeholder for the Card which is selected to prevent the unnecessary movement of the other cards.</p>\n<p>then we have something like this</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/854/1*L-eOpqwIkQv9Lw7bdV1VrA.gif\"></figure><p>Cards with placeholder</p>\n<p>you can see the demos <a href=\"https://code-victor.github.io/Layout-animation/\">here.</a> Thank you and follow for more.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=25807bfc3750\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OgfGgWfcV4JEKUvNxf2AuA.png\"><figcaption>Logo of framer motion</figcaption></figure><p>One of the significant differences between a boring user experience and a good one is animations. Not just fade-in animations but animations with context(such as micro animations in icons or buttons and Layout animations).</p>\n<p>Layout animation which is my focus is really of importance, because the attention of the user often follows animations. But the current state of the web doesn’t support layout effects. We’ve always seen layout animations on mobile apps, when we click on a card then it pops up giving more details, and the experience is quite enjoyable You’re always sure of what to do next. but on the web, you get something like this.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/854/1*GuhBgtp4Ppedai47b4xv9w.gif\"></figure><p>😤😤 annoying isn’t it. The user interface just threw the user into an ocean of doubts and questions— “what am I going to do next?”, “Is this the element I clicked on?”. These sorts of questions are what prompted me to write this.</p>\n<p>We would implement a solution to this problem with <a href=\"https://reactjs.org/\">react</a>, <a href=\"https://www.typescriptlang.org/\">typescript</a>(very minimal), <a href=\"https://stitches.dev/\">Stitches.js</a> (a CSS in JS library), and <a href=\"https://www.framer.com/motion/\">framer motion</a>, our animation library. First, we build our user interface, nothing complex just a centered grid with 2 columns and cards.</p>\n<h4>1. Building the user interface</h4>\n<p>We import the necessary libraries</p>\n<a href=\"https://medium.com/media/b3929118573e74269d6296196b92bb18/href\">https://medium.com/media/b3929118573e74269d6296196b92bb18/href</a><p>we then get the data for components you can get all the images from the <a href=\"https://github.com/Code-Victor/Layout-animation\">GitHub repository.</a></p>\n<a href=\"https://medium.com/media/36ca65ad8f6e50264b44c17efd47a3dc/href\">https://medium.com/media/36ca65ad8f6e50264b44c17efd47a3dc/href</a><p>then we create our base components, it doesn’t have to be in the same file.</p>\n<a href=\"https://medium.com/media/4efacedaa90a8a050034d22fa6c6699f/href\">https://medium.com/media/4efacedaa90a8a050034d22fa6c6699f/href</a><p>the syntax of stitches is just like most CSS-in-JS frameworks, with a twist — Stitches has a fully-typed API that gives it the best Developer Experience. Composing all of these little parts together, we build the user interface</p>\n<a href=\"https://medium.com/media/2d3b19397646bc7ac6320e59e3a94e71/href\">https://medium.com/media/2d3b19397646bc7ac6320e59e3a94e71/href</a><p>The code is simple. we created a state to store the id of the selected item(for those new to typescript the &lt;undefined | number&gt; is just to indicate that type of the constant selected can either be a number or undefined) and we built the user interface with the base components. This is the result</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/854/1*GuhBgtp4Ppedai47b4xv9w.gif\"><figcaption>of the layout</figcaption></figure><p>It’s functional but without animations. To add animation to it will have to make use of the motion component.</p>\n<h4>2. Adding animations</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*04haYozrLH6fRrBl7VTzcg.png\"><figcaption>updated components</figcaption></figure><p>now that we’ve updated our base components, we have to make use of the properties given to us by the motion component. The properties of concern are layoutId and layout . with layoutId property framer-motion can identify the element and if the position of the element changes in the DOM it animates the elements(so far the layoutId stays the same). This might be a lot to take in at first but in practice is far too easy. So we add the layoutId to the Card component.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZKmR6ei3hcacoBX38cENVQ.png\"><figcaption>added layout Id (line 17)</figcaption></figure><p>the results?</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/854/1*WLtlkvckMd7hY_4apRhr5w.gif\"><figcaption>Final result</figcaption></figure><p>better right? We can notice that the elements in the background were animated to fill up the space but the MainCard didn’t animate at all. that’s because the MainCard doesn’t have the layoutId of the selected card(i.e the card that was removed from the DOM). By adding this we get the animation we’ve been looking for.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vdy1H26IxczklahfMlwQXQ.png\"><figcaption>MainCard with layouId(Line 38)</figcaption></figure><p>the results?</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/854/1*UIQY4a_bitBDdxOzo3PebQ.gif\"><figcaption>Final result</figcaption></figure><p>we’ve finally seen what we want. You can see how easy it is to build layout animations with framer-motion. this is the code for the app</p>\n<a href=\"https://medium.com/media/2384baab1d401198db563d2884ff181a/href\">https://medium.com/media/2384baab1d401198db563d2884ff181a/href</a><h4>3. HindSight</h4>\n<p>we could have added a placeholder for the Card which is selected to prevent the unnecessary movement of the other cards.</p>\n<p>then we have something like this</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/854/1*L-eOpqwIkQv9Lw7bdV1VrA.gif\"></figure><p>Cards with placeholder</p>\n<p>you can see the demos <a href=\"https://code-victor.github.io/Layout-animation/\">here.</a> Thank you and follow for more.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=25807bfc3750\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["typescript-with-react","react","framer-motion","web-animation"]}]}}},"__N_SSG":true}